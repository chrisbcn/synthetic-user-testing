import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { prompt: videoPrompt, persona, responseText } = await request.json()

    const runwayApiKey = process.env.RUNWAY_API_KEY
    const geminiApiKey = process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY

    console.log("[v0] API Keys available:", {
      runway: !!runwayApiKey,
      gemini: !!geminiApiKey,
    })

    if (runwayApiKey) {
      console.log("[v0] Attempting real video generation via Runway ML")

      try {
        const videoGenerationPrompt = `${persona.physicalTraits?.appearance || "Professional person"}, ${persona.age} years old, speaking directly to camera in a warm, welcoming environment. ${persona.personality || "Confident and articulate"}. Setting: cozy living room with soft natural lighting from large windows, or luxurious walk-in wardrobe with warm ambient lighting and rich textures, or sunny outdoor terrace with golden hour lighting, or beautifully appointed home office with warm wood tones and soft lamp lighting. Quote: "${responseText}"`

        const runwayResponse = await fetch("https://api.runwayml.com/v1/image_to_video", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${runwayApiKey}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: "gen3a_turbo",
            prompt_text: videoGenerationPrompt,
            duration: 10,
            ratio: "16:9",
            resolution: "720p",
            seed: Math.floor(Math.random() * 1000000),
          }),
        })

        if (runwayResponse.ok) {
          const runwayResult = await runwayResponse.json()
          console.log("[v0] Runway ML video generation initiated:", runwayResult.id)

          const videoData = {
            success: true,
            message: "Video generation started with Runway ML! This typically takes 1-3 minutes.",
            instructions: `Your video is being generated by Runway ML.

Task ID: ${runwayResult.id}

The video will be processed and you can check the status by refreshing this page or checking your Runway ML dashboard at runwayml.com.

Once complete, the video will be available for download.`,
            videoUrl: null,
            thumbnailUrl: null,
            taskId: runwayResult.id,
            status: "generating",
            generatedAt: new Date().toISOString(),
            provider: "runway-ml",
            prompt: videoGenerationPrompt,
          }
          return NextResponse.json(videoData)
        } else {
          const errorText = await runwayResponse.text()
          console.log("[v0] Runway ML failed, falling back to prompt generation:", errorText)
        }
      } catch (runwayError) {
        console.log("[v0] Runway ML error, falling back to prompt generation:", runwayError)
      }
    }

    if (!geminiApiKey) {
      console.log("[v0] No API keys found")
      const mockVideoData = {
        success: false,
        error:
          "No API key configured. Add RUNWAY_API_KEY for real video generation, or GEMINI_API_KEY for prompt generation.",
        message: "This demo generates video prompts that can be used with video generation services.",
        instructions: `To set up real video generation with Runway ML:

1. Sign up at runwayml.com
2. Subscribe to a paid plan ($12/month minimum)
3. Get your API key from the Runway ML dashboard
4. Add RUNWAY_API_KEY to your environment variables

Or add GEMINI_API_KEY for prompt generation only.`,
        videoUrl: null,
        thumbnailUrl: null,
        status: "error",
        generatedAt: new Date().toISOString(),
        provider: "none",
      }
      return NextResponse.json(mockVideoData)
    }

    console.log("[v0] Generating optimized video prompt (not actual video)")

    const personaName = persona?.name || "Unknown Person"
    const personaAge = persona?.age || "Unknown age"
    const personaLocation = persona?.location || "Unknown location"
    const personaAppearance = persona?.physicalTraits?.appearance || "Professional appearance"
    const personaPersonality = persona?.personality || "Confident and articulate"

    const enhancedPrompt = `Create a detailed video generation prompt optimized for Runway ML's Gen-3 Alpha Turbo model with warm, welcoming environments:

PERSONA: ${personaName} (${personaAge} years old, ${personaLocation})
PHYSICAL TRAITS: ${personaAppearance}
PERSONALITY: ${personaPersonality}
RESPONSE: "${responseText}"

Generate a comprehensive Runway ML prompt that includes:
1. Clear physical description and styling details
2. WARM, COMFORTABLE SETTING OPTIONS:
   - Cozy living room with soft natural lighting from large windows
   - Luxurious walk-in wardrobe with warm ambient lighting and rich textures
   - Sunny outdoor space (terrace, garden) with golden hour lighting
   - Beautifully appointed home office with warm wood tones, soft desk lamps, and comfortable furnishings
3. LIGHTING REQUIREMENTS:
   - Soft, warm lighting (golden hour, table lamps, natural window light)
   - Avoid harsh fluorescent, strip lighting, or cool blue tones
   - Use warm color palette: golden, amber, cream, soft browns
4. Natural speaking gestures and expressions showing comfort and ease
5. Camera framing (medium shot, direct eye contact) in the welcoming environment
6. Professional yet comfortable clothing appropriate for the luxurious home setting

Keep the prompt concise but descriptive, emphasizing the warm, inviting atmosphere that makes viewers feel welcome and comfortable.`

    console.log("[v0] Making request to Gemini API...")

    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${geminiApiKey}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                parts: [
                  {
                    text: enhancedPrompt,
                  },
                ],
              },
            ],
            generationConfig: {
              temperature: 0.7,
              maxOutputTokens: 1000,
            },
          }),
        },
      )

      console.log("[v0] Gemini API response status:", response.status)

      if (!response.ok) {
        const errorText = await response.text()
        console.error("[v0] Gemini API error:", response.status, errorText)

        const errorData = {
          success: false,
          error: `API Error ${response.status}: ${errorText}`,
          message: "Failed to generate video prompt.",
          instructions: "Check your Gemini API key and try again.",
          videoUrl: null,
          thumbnailUrl: null,
          status: "error",
          generatedAt: new Date().toISOString(),
          provider: "gemini-api",
        }
        return NextResponse.json(errorData)
      }

      const geminiResponse = await response.json()
      console.log("[v0] Video prompt generated successfully")

      const generatedPrompt = geminiResponse.candidates?.[0]?.content?.parts?.[0]?.text || ""

      const videoData = {
        success: true,
        message: "Runway ML-optimized video prompt generated! Copy this to use with Runway ML.",
        instructions: `This system generates prompts optimized for Runway ML. To create the video:

1. Copy the generated prompt below
2. Go to runwayml.com and sign in
3. Navigate to Gen-3 Alpha Turbo
4. Paste the prompt and generate your video
5. Download the result when complete

For automatic video generation, add your RUNWAY_API_KEY to environment variables.

Generated Runway ML Prompt:
${generatedPrompt}`,
        videoUrl: null,
        thumbnailUrl: null,
        duration: null,
        status: "completed",
        generatedAt: new Date().toISOString(),
        provider: "runway-prompt-generator",
        prompt: videoPrompt,
        generatedPrompt: generatedPrompt,
      }

      return NextResponse.json(videoData)
    } catch (fetchError) {
      console.error("[v0] Fetch error when calling Gemini API:", fetchError)

      const errorData = {
        success: false,
        error: `Network error: ${fetchError instanceof Error ? fetchError.message : "Failed to connect to Gemini API"}`,
        message: "Unable to connect to the video prompt generation service.",
        instructions:
          "This might be a network issue or API key problem. Please check your GEMINI_API_KEY environment variable and try again.",
        videoUrl: null,
        thumbnailUrl: null,
        status: "error",
        generatedAt: new Date().toISOString(),
        provider: "gemini-api-error",
      }
      return NextResponse.json(errorData)
    }
  } catch (error) {
    console.error("[v0] Video generation error:", error)

    const errorData = {
      success: false,
      error: `Video generation failed: ${error instanceof Error ? error.message : "Unknown error"}`,
      message: "An error occurred during video generation.",
      instructions: "Please try again or check your API configuration.",
      videoUrl: null,
      thumbnailUrl: null,
      status: "error",
      generatedAt: new Date().toISOString(),
      provider: "error",
    }
    return NextResponse.json(errorData)
  }
}
